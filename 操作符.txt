shell 操作符

&&运算符:

command1  && command2

&&左边的命令（命令1）返回真(即返回0，成功被执行）后，&&右边的命令（命令2）才能够被执行；换句话说，“如果这个命令执行成功&&那么执行这个命令”。

1 命令之间使用 && 连接，实现逻辑与的功能。
2 只有在 && 左边的命令返回真（命令返回值 $? == 0），&& 右边的命令才会被执行。
3 只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。

示例 1
malihou@ubuntu:~$ cp ~/Desktop/1.txt ~/1.txt && rm ~/Desktop/1.txt && echo "success"
 
示例 1 中的命令首先从 ~/Desktop 目录复制 1.txt 文件到 ~ 目录；执行成功后，使用 rm 删除源文件；如果删除成功则输出提示信息。

||运算符:
command1 || command2
 
||则与&&相反。如果||左边的命令（命令1）未执行成功，那么就执行||右边的命令（命令2）；或者换句话说，“如果这个命令执行失败了||那么就执行这个命令。
1 命令之间使用 || 连接，实现逻辑或的功能。
2 只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才会被执行。这和 c 语言中的逻辑或语法功能相同，即实现短路逻辑或操作。
3 只要有一个命令返回真（命令返回值 $? == 0），后面的命令就不会被执行。
 
示例 2
malihou@ubuntu:~$ rm ~/Desktop/1.txt || echo "fail"
 
在示例 2 中，如果 ~/Desktop 目录下不存在文件 1.txt，将输出提示信息

()运算符:

为了在当前shell中执行一组命令，可以用命令分隔符(即",")隔开每一个命令，并把所有的命令用圆括号()括起来。 
它的一般形式为： 
        ( 命令；命令；命令… )
 
1 一条命令需要独占一个物理行，如果需要将多条命令放在同一行，命令之间使用命令分隔符（;）分隔。执行的效果等同于多个独立的命令单独执行的效果。
2 () 表示在当前 shell 中将多个命令作为一个整体执行。需要注意的是，使用 () 括起来的命令在执行前面都不会切换当前工作目录，也就是说命令组合都是在当前工作目录下被执行的，尽管命令中有切换目录的命令。
3 命令组合常和命令执行控制结合起来使用。
 
示例 4
malihou@ubuntu:~$ rm ~/Desktop/1.txt || (cd ~/Desktop/;ls -a;echo "fail")
 
在示例 4 中，如果目录 ~/Desktop 下不存在文件 1.txt，则执行命令组合。
 
 
{}运算符:
如果使用{}来代替()，那么相应的命令将在子shell而不是当前shell中作为一个整体被执行，只有在{}中所有命令的输出作为一个整体被重定向时，其中的命令才被放到子shell中执行，否则在当前shell执行。
它的一般形式为： 
      { 命令；命令；命令… } 
（注意：在使用{}时，{}与命令之间必须使用一个空格）
 
测试： 
~$ A=1;echo $A;{ A=2; };echo $A 
1 
2 
 
~$ A=1;echo $A;( A=2; );echo $A 
1 
1 

单中括号[ ]：

字符串比较——==和!=

整数比较——不等于：-gt：大于；-lt ：小于；-eq：等于；-ne

数组索引——array[0]

[[ ]]：

字符串比较用双中括号[[ ]]；算数比较用单中括号[ ]——左右留空格

单括号()：

另开命令组——小括号中的内容会开启一个子shell独立运行；括号中以分号连接，最后一个命令不需要；各命令和括号无空格

得到命令输出——a=$(command), 等同于a=$`command`,得到命令输出传递给变量a

初始化数组——array=(a b c d)

字符串比较——可以把右边的作为一个模式，而不仅仅是一个字符串，比如[[ hello == hell? ]]，结果为真。[[ ]] 中匹配字符串或通配符，不需要引号。

逻辑运算符——防止脚本许多逻辑错误，比如，&&、||、<和> 操作符能够正常存在于[[ ]]条件判断结构中，但是如果出现在[ ]结构中的话，会报错。比如可以直接使用if [[ $a != 1 && $a != 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] && [ $a != 2 ]或者if [ $a -ne 1 -a $a != 2 ]。

退出码——bash把双中括号中的表达式看作一个单独的元素，并返回一个退出状态码。

if ($i<5)    
if [ $i -lt 5 ]    
if [ $a -ne 1 -a $a != 2 ]    
if [ $a -ne 1] && [ $a != 2 ]    
if [[ $a != 1 && $a != 2 ]]    
     
for i in $(seq 0 4);do echo $i;done    
for i in `seq 0 4`;do echo $i;done    
for ((i=0;i<5;i++));do echo $i;done    
for i in {0..4};do echo $i;done

(( )) ：

算数运算用双小括号(( )) ；shell命令及输出用小括号( )——左右不留空格

省去$符号的算术运算—— for((i=0;i<5;i++))； if (($i<5))； a=5; ((a++)) 可将 $a 重定义为6；括号内支持多个表达式用逗号分开。 

C语言规则运算——$((exp))，exp为符合C语言规则的运算符，表达式

跨进制运算——二进制、八进制、十六进制运算时，输出结果全都自动转化成了十进制。如：echo $((16#5f)) 结果为95 (16进位转十进制)

{ }：
快速替换用花括号{ }——左右留空格

` `
反单引号起着命令替换的作用` `

符号$后的括号

（1）${a} 变量a的值, 在不引起歧义的情况下可以省略大括号。

（2）$(cmd) 命令替换，和`cmd`效果相同，结果为shell命令cmd的输，过某些Shell版本不支持$()形式的命令替换, 如tcsh。

（3）$((expression)) 和`exprexpression`效果相同, 计算数学表达式exp的数值, 其中exp只要符合C语言的运算规则即可, 甚至三目运算符和逻辑表达式都可以计算。